CREATE DATABASE ASSIGNMENT5
USE ASSIGNMENT5

CREATE TABLE ORDERS(
ORDERID INT PRIMARY KEY IDENTITY(101, 1), 
ORDERDATE DATE DEFAULT GETDATE(), 
CUSTOMERID INT FOREIGN KEY REFERENCES CUSTOMERS(CUSTOMERID) ON UPDATE CASCADE ON DELETE CASCADE, 
PRODUCTID INT FOREIGN KEY REFERENCES PRODUCTS(PRODUCTID) ON UPDATE CASCADE ON DELETE CASCADE,
QUANTITY INT,
PRICE BIGINT,
SHIPPINGADDRESS VARCHAR(255)
)

SELECT * FROM ORDERS
INSERT INTO ORDERS VALUES
('2025-08-05', 1, 1001, 5, 45000, 'AKOTA'),
('2025-07-25', 2, 1002, 3, 25000, 'ALKAPURI'),
('2025-06-20', 3, 1003, 7, 30000, 'SUN-PHARMA'),
('2025-05-15', 4, 1004, 10, 15000, 'TANDALJA'),
('2025-04-10', 5, 1005, 8, 20000, 'ATLADRA')

SELECT * FROM ORDERS

DROP TABLE ORDERS
CREATE TABLE CUSTOMERS(
CUSTOMERID INT PRIMARY KEY IDENTITY, 
CUSTOMERNAME VARCHAR(255),
ADDRESS VARCHAR(255),
CITY VARCHAR(255),
STATE VARCHAR(255),
COUNTRY VARCHAR(255)
)

SELECT * FROM CUSTOMERS

INSERT INTO CUSTOMERS VALUES
('SAHIL', 'TANDALJA','VADODARA', 'GUJARAT', 'INDIA'),
('ADOLF', 'AKOTA','ANAND', 'GUJARAT', 'INDIA'),
('SADDAM', 'ALKAPURI','SURAT', 'GUJARAT', 'INDIA'),
('PABLO', 'SUN-PHARMA','AHEMADABAD', 'GUJARAT', 'INDIA'),
('KHAMENIE', 'DABHOI','GHANDHINAGAR', 'GUJARAT', 'INDIA')

DROP TABLE CUSTOMERS

SELECT * FROM CUSTOMERS

CREATE TABLE PRODUCTS(
PRODUCTID INT PRIMARY KEY IDENTITY(1001, 1), 
PRODUCTNAME VARCHAR(255),
CATEGORYID INT,
PRICE BIGINT,
INSTOCK VARCHAR(255)
)
DROP TABLE PRODUCTS
INSERT INTO PRODUCTS VALUES
('LAPTOP', 11, 25000, 'YES'),
('MOBILE', 12, 15000, 'NO'),
('TABLET', 13, 10000, 'YES'),
('KINDLE', 14, 5000, 'NO'),
('SMART-WATCH', 15, 2500, 'YES')

SELECT * FROM PRODUCTS

DROP TABLE PRODUCTS


SELECT * FROM ORDERS
SELECT * FROM CUSTOMERS
SELECT * FROM PRODUCTS

--2. Find the total quantity and revenue for each product.
	
	SELECT SUM(O.QUANTITY * O.PRICE) AS REVENUE , P.PRODUCTNAME
	FROM ORDERS O 
	JOIN PRODUCTS P
	ON P.PRODUCTID = O.PRODUCTID
	GROUP BY PRODUCTNAME 


--3. Find the top 5 customers with the highest total spending.

	SELECT TOP 5 C.CUSTOMERNAME, SUM(O.QUANTITY * O.PRICE) AS HIGHEST_TOTAL_SPENDING 
	FROM ORDERS O
	JOIN CUSTOMERS C 
	ON O.CUSTOMERID = C.CUSTOMERID
	GROUP BY C.CUSTOMERNAME
	ORDER BY HIGHEST_TOTAL_SPENDING DESC

--4. Calculate the average order value for each state.
	
	SELECT C.STATE, AVG(QUANTITY * O.PRICE) AS AVERAGE_ORDER_VALUE
	FROM ORDERS O
	JOIN CUSTOMERS C
	ON O.CUSTOMERID = C.CUSTOMERID
	GROUP BY C.STATE

	SELECT * FROM CUSTOMERS
	SELECT * FROM ORDERS
	SELECT * FROM PRODUCTS

--5. Find the products that have been ordered more than once.

SELECT P.PRODUCTNAME, O.QUANTITY AS ORDERS 
FROM ORDERS O
JOIN PRODUCTS P
ON P.PRODUCTID = O.PRODUCTID
WHERE QUANTITY > 1

SELECT * FROM PRODUCTS

--6. Find the products that have been ordered by the most customers.
	


	SELECT TOP 1 P.PRODUCTNAME, O.QUANTITY AS ORDER_COUNT
	FROM PRODUCTS P
	JOIN ORDERS O 
	ON O.PRODUCTID = P.PRODUCTID
	ORDER BY ORDER_COUNT DESC

	SELECT * FROM ORDERS
	SELECT * FROM PRODUCTS
	SELECT * FROM CUSTOMERS
	

--7. Create an index on the OrderDate column of the Orders table.
	
	CREATE INDEX IX_ORDER_DATE
	ON ORDERS(ORDERDATE)

--8. Using Subquery Find products that have never been ordered.

	SELECT PRODUCTNAME 
	FROM PRODUCTS 
	WHERE PRODUCTID = 
	(SELECT PRODUCTID FROM ORDERS 
	WHERE QUANTITY < 1)

	
	SELECT * FROM ORDERS
	SELECT * FROM PRODUCTS
	SELECT * FROM CUSTOMERS